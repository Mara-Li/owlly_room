import discord
from discord.colour import Color
from discord.ext import commands, tasks
from discord.utils import get
from typing import Optional
from discord.ext.commands import TextChannelConverter as tcc
import sqlite3
import re
from discord import Colour
import os.path
import json
import asyncio
import unidecode
import glob

class Personnage():
	def __init__(self):
		self.nom = "nom"
		self.prenom = "prenom"
		self.surnom = "surnom"
		self.age = "age"
		self.anniversaire = "birthday"
		self.sexe = "sexe"
		self.race = "race"
		self.metier = "metier"
		self.yeux = "yeux"
		self.cheveux = "cheveux"
		self.taille = "taille"
		self.poids = "poids"
		self.peau = "peau"
		self.marques = "marques"
		self.image = "link"

class presentation (commands.Cog, name="Pr√©sentation", description="Permet de d√©buter la pr√©sentation d'un personnage suite √† la validation d'une fiche."):
	def __init__(self, bot):
		self.bot = bot
	
	async def forme (member: discord.Member, chartype):
		f = open(f"fiche/{chartype}_{member}.txt", "r", encoding="utf-8")
		data=f.readlines()
		f.close()
		msg="error"
		if (len(data) > 0):
			data = "".join(data)
			data = data.replace("\'", "\"")
			perso = json.loads(data)
			if "image" in perso.keys():
				nom = perso.get("nom")
				prenom = perso.get("prenom")
				age = perso.get("age")
				surnom=perso.get("surnom")
				anniversaire=perso.get("anniversaire")
				sexe=perso.get("sexe")
				race=perso.get("race")
				metier=perso.get("metier")
				yeux=perso.get("yeux")
				cheveux=perso.get("cheveux")
				taille=perso.get("taille")
				poids=perso.get("poids")
				peau=perso.get("peau")
				marque=perso.get("marques")
				img=perso.get("image")
				msg = f"‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‡º∫ Pr√©sentation ‡ºª‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n**__Nom__** : {nom}\n**__Pr√©nom__** : {prenom}\n**__Surnom__** : {surnom}\n**__√Çge__** : {age} | {anniversaire}\n**__Sexe__** : {sexe}\n**__Race__** : {race}\n**__M√©tier__** : {metier}\n\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‡º∫Physique‡ºª‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n**__Yeux__** : {yeux}\n**__Cheveux__** : {cheveux}\n**__Taille__** : {taille}\n**__Poids__** : {poids}\n**__Peau__** : {peau}\n**__Marques__** : {marque}\n\n‚ãÜ‚ãÖ‚ãÖ‚ãÖ‚ä±‚àò‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚àò‚ä∞‚ãÖ‚ãÖ‚ãÖ‚ãÜ\n*Auteur* : {member.mention}\n{img}"
		return msg

	async def start_presentation(self, ctx, member: discord.Member, chartype):
		template = vars(Personnage())
		def checkRep(message):
			return message.author == member and isinstance(message.channel, discord.DMChannel)
		emoji=["‚úÖ", "‚ùå"]
		def checkValid(reaction, user):
			return ctx.message.author == user and q.id == reaction.message.id and str(reaction.emoji) in emoji
		if not os.path.isfile(f'fiche/{chartype}_{member}{member}.txt'):
			perso = {}
		else:
			f = open(f"fiche/{chartype}_{member}{member}.txt", "r", encoding="utf-8")
			data = f.readlines()
			f.close()
			if (len(data) > 0):
				data = "".join(data)
				data = data.replace("\'", "\"")
				perso = json.loads(data)
			else:
				perso = {}
		f = open(f"fiche/{chartype}_{member}{member}.txt", "w", encoding="utf-8")
		while "link" not in perso.keys():
			for t in template.keys():
				if t not in perso.keys():
					champ=t.capitalize()
					if champ == "Desc":
						champ = "Description physique"
					elif champ == "Image":
						champ = "Lien vers le faceclaim"
					elif champ == "Prenom":
						champ = "Pr√©nom"
					elif champ == "Anniversaire":
						champ = "Date d'anniversaire"
					elif champ == "Metier":
						champ = "M√©tier"
					q=await member.send(f"{champ} ?\n Si votre perso n'en a pas, merci de mettre `/` ou `NA`.")
					rep = await self.bot.wait_for("message", timeout="300", check=checkRep)
					try:
						if rep.content.lower() == "stop":
							await member.send("Mise en pause. Vous pourrez reprendre plus tard avec la commande `fiche -reprise`")
							f.write(str(perso))
							f.close()
							return "NOTdone"
						elif rep.content.lower()=="cancel":
							await member.send("Annulation de la pr√©sentation.")
							f.close()
							os.remove(f"fiche/{chartype}_{member}.txt")
							await q.delete()
							await rep.delete()
							return "delete"
						else:
							perso.update({t: rep.content})
					except asyncio.TimeoutError:
						await member.send("Timeout ! Enregistrement des modifications.")
						f.write(str(perso))
						f.close()
						return "NOTdone"
		f.write(str(perso))
		f.close()
		msg=await self.forme(member)
		if msg != "error":
			await q.edit(content="Votre pr√©sentation est donc : \n {msg}. Validez-vous ses param√®tres ?")
			await q.add_reaction("‚úÖ")
			await q.add_reaction("‚ùå")
			reaction, user = await self.bot.wait_for("reaction_add", timeout=300, check=checkValid)
			if reaction.emoji == "‚úÖ":
				await q.edit(content="Fin de la pr√©sentation ! Merci de votre coop√©ration.")
				await q.clear_reactions()
				return "done"
			else:
				await q.clear_reactions()
				await q.edit(content = "Vous √™tes insatisfait. Si vous souhaitez annuler et supprimer votre pr√©sentation, faites `{ctx.prefix}presentation -delete` sur le serveur. \n Si vous souhaitez √©diter un champ, faite `{ctx.prefix}presentation -edition [champ √† √©diter]")
				return "NOTdone"
		return "ERROR"				
	
	async def validation(self, ctx, msg, chartype, member: discord.Member):
		if msg != "error":
			db = sqlite3.connect("owlly.db", timeout=3000)
			c = db.cursor()
			SQL = "SELECT fiche_pj, fiche_pnj, fiche_validation FROM SERVEUR WHERE idS=?"
			c.execute(SQL,(ctx.guild.id))
			channel=c.fetchone()
			def checkValid(reaction, user):
				return ctx.message.author == user and q.id == reaction.message.id and (str(reaction.emoji) == "‚úÖ" or str(reaction.emoji) == "‚ùå")
			if (channel[0] is not None) and (channel[1] is not None) and (channel[0] != 0) and (channel[1] != 0):
				chan=tcc.convert(self, ctx, channel[2])
				q=await chan.send (f"Il y a une pr√©sentation √† valider ! Son contenu est :\n {msg}\n\n Validez-vous la fiche ? ")
				q.add_reaction("‚úÖ")
				q.add_reaction("‚ùå")
				reaction, user = await self.bot.wait_for("reaction_add", timeout=300, check=checkValid)
				if reaction.emoji=="‚úÖ":
					if chartype.lower() == "pnj":
						if channel[1] != 0:
							chan_send=tcc.convert(channel[1])
						else:
							chan_send=tcc.convert(channel[0])
					else:
						chan_send=tcc.convert(channel[0])
					await chan_send.send(msg)
				else:
					await member.send("Il y a un soucis avec votre fiche ! Rapprochez-vous des mod√©rateurs pour voir le soucis.")
			else:
				await member.send ("Huh, il y a eu un soucis avec l'envoie. Il semblerait que les channels ne soient pas configur√©s ! Rapproche toi du staff pour le pr√©venir. \n Note : Ce genre de chose n'est pas sens√© arriv√©, donc contacte aussi @Mara#3000 et fait un rapport de bug. ")

	@commands.command(aliases=["pres"], brief="Commandes pour modifier une pr√©sentation en cours.", usage="fiche -(reprise pnj/pj)|(delete pnj/pj)|(edit pj/pnj champ)", help="`fiche -delete` permet de supprimer la pr√©sentation en cours. \n `fiche -edit` permet d'√©diter un champ d'une pr√©sentation en cours. \n `fiche -reprise` permet de reprendre l'√©criture d'une pr√©sentation en cours. \n Par d√©faut, les fiches sont des fiches de PJ, donc si vous faites un PNJ, n'oublier pas de le pr√©ciser apr√®s le nom de la commande !")
	async def fiche (self, ctx, arg, chartype="pj", value="0"):
		member=ctx.message.author
		def checkRep(message):
			return message.author == member and isinstance(message.channel, discord.DMChannel)
		db = sqlite3.connect("owlly.db", timeout=3000)
		c = db.cursor()
		SQL = "SELECT fiche_pj, fiche_pnj, fiche_validation FROM SERVEUR WHERE idS=?"
		c.execute(SQL, (ctx.guild.id))
		channel = c.fetchone()
		if (channel[0] is not None) and (channel[1] is not None) and (channel[0] != 0) and (channel[1] !=0):
			if os.path.isfile(f"fiche/{chartype}_{member}.txt"):
				if arg.lower() == "-edit" and value != "0":
					f = open(f"fiche/{chartype}_{member}.txt", "r", encoding="utf-8")
					data = f.readlines()
					f.close()
					f=open(f"fiche/{chartype}_{member}.txt", "w", encoding="utf-8")
					if (len(data) > 0):
						data = "".join(data)
						data = data.replace("\'", "\"")
						perso = json.loads(data)
						if unidecode.unidecode(value.lower()) in perso.keys():
							for k in perso.keys():
								if k == unidecode.unidecode(value.lower()):
									await ctx.send("Regardez vos DM ! üì® !")
									q = await member.send(f"Par quoi voulez-vous modifier {value.capitalize()} ?\n Actuellement, elle a pour valeur {perso.get(unidecode.unidecode(value.lower()))}.")
									rep = self.bot.wait_for("message", timeout=300, check=checkRep)
									if rep.content.lower() == "stop":
										await q.delete()
										await member.send("Annulation")
										await rep.delete()
										return
									perso[unidecode.unidecode(value.lower())] = rep.content
									f.write(perso)
									q=await q.edit(content="{value.capitalize()} a bien √©t√© modifi√© !")
						else:
							q=await member.send(f"Je n'ai pas trouv√© le champ {value.capitalize()}...")
					f.close()
				elif arg.lower() == "-delete":
					os.remove("fiche/{chartype}_{member}.txt")
					await ctx.send("Votre pr√©sentation a √©t√© supprim√©.")
				elif arg.lower() == "-reprise":
					await ctx.send("Regardez vos DM üì® !")
					step=await self.start_presentation(ctx, member, chartype)
					if step == "done":
						msg=self.forme(chartype)
						await self.validation(ctx, msg, chartype, member)
			else:
				await ctx.send("Vous n'avez pas de pr√©sentation en cours !")
		else:
			await ctx.send("Impossible de faire une pr√©sentation : Les channels ne sont pas configur√© !")
